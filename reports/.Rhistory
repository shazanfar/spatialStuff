library(MultiAssayWorkshop)
vignette(MultiAssayWorkshop)
vignette("MultiAssayWorkshop")
?MultiAssayWorkshop
vignette(package="MultiAssayWorkshop")
vignette(Ramos_MultiAssayExperiment,package="MultiAssayWorkshop")
vignette("Ramos_MultiAssayExperiment",package="MultiAssayWorkshop")
MultiAssayExperiment
MultiAssayExperiment::MultiAssayExperiment
data("miniACC")
MultiAssayExperiment(experiments=experiments(miniACC),
colData=colData(miniACC),
sampleMap=sampleMap(miniACC),
metadata=metadata(miniACC))
BiocManager::install("miniACC")
data(miniACC)
data("miniACC")
library(MultiAssayExperiment)
data("miniACC")
MultiAssayExperiment(experiments=experiments(miniACC),
colData=colData(miniACC),
sampleMap=sampleMap(miniACC),
metadata=metadata(miniACC))
?prepMultiAssay
aacmae<-MultiAssayExperiment(experiments=experiments(miniACC),
colData=colData(miniACC),
sampleMap=sampleMap(miniACC),
metadata=metadata(miniACC))
experiments(aacmae)
sampleMap(aacmae)
library(ExperimentHub)
eh <- ExperimentHub()
display(eh)
display(eh)
head(eh)
display(eh)
query(eh, "gtex")
eh["EH556"]
gt <- eh["EH556"]
library(MultiAssayExperiment)
GEOquery::getGEO("GSE71585")
aa <- GEOquery::getGEO("GSE71585")
BiocManager::install("yarn")
library(yarn)
ggt <- downloadGTEx(type="genes", "gtex")
ggt <- downloadGTEx(type="genes", "~/gtex")
ggt <- downloadGTEx(type="genes", "./gtex.rds")
downloadGTEx()
downloadGTEx
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dada2)
library(vegan)
miseq_path <- "~/MiSeq_SOP" #CHANGE DIRECTORY DEPENDING ON THE NEEDS
if(!file_test("-d", miseq_path)) {
dir.create(miseq_path)
}
download.file("http://www.mothur.org/w/images/d/d6/MiSeqSOPData.zip", destfile = paste(miseq_path,"MiSeqSOPData.zip", sep ="/"))
unzip(paste(miseq_path, "MiSeqSOPData.zip", sep ="/"), exdir = miseq_path)
invisible(file.remove(file.path(miseq_path, "MiSeqSOPData.zip")))
unlink(x = paste(miseq_path,"__MACOSX", sep ="/"), recursive = T)
miseq_path2=paste(miseq_path,"MiSeq_SOP", sep ="/")
fnFs <- sort(list.files(miseq_path2, pattern="_R1_001.fastq"))
fnRs <- sort(list.files(miseq_path2, pattern="_R2_001.fastq"))
fnFs
sampleNames <- sapply(strsplit(fnFs, "_"), `[`, 1)
fnFs <- file.path(miseq_path2, fnFs)
fnRs <- file.path(miseq_path2, fnRs)
plotQualityProfile(fnFs[1:2])
plotQualityProfile(fnRs[1:2])
barcodes <- read.csv("Downloads/raw_feature_bc_matrix/barcodes.tsv", sep="\t")
barcodes
^^spatial
??spatial
vignette("spatial")
vignette(package="spatial")
barcodes <- read.csv("Downloads/spatial/tissue_positions_list.csv")
barcodes
spatial.tsv <- read.csv("Downloads/spatial/tissue_positions_list.csv")
barcodes <- read.csv("Downloads/raw_feature_bc_matrix/barcodes.tsv", sep="\t")
barcodes
barcodes[,1]
tissue.positions <- read.csv("Downloads/spatial/tissue_positions_list.csv")
barcodes <- read.csv("Downloads/raw_feature_bc_matrix/barcodes.tsv", sep="\t")
sum(barcodes[,1] %in% tissue.positions[,1])
dim(barcodes)
barcodes <- read.csv("Downloads/raw_feature_bc_matrix/barcodes.tsv", sep="\t", header=FALSE)
tissue.positions <- read.csv("Downloads/spatial/tissue_positions_list.csv", header=FALSE)
barcodes <- read.csv("Downloads/raw_feature_bc_matrix/barcodes.tsv", sep="\t", header=FALSE)
sum(barcodes[,1] %in% tissue.positions[,1])
dim(barcodes)
dim(tissue.positions)
tissue.positions[,c(2,3)]
tissue.positions[,c(3,4)]
duplicated(tissue.positions[,c(3,4)])
sum(duplicated(tissue.positions[,c(3,4)]))
sce <- SingleCellExperiment::SingleCellExperiment()
sce
?DFrame
??DFrame
?UseMethod
?summarizedExperiments
?summarizedExperiment
?SummarizedExperiment
?disableValidity
??disableValidity
??S4Vectors:::disableValidity
S4Vectors:::disableValidity
??DFrame
?singlecellexperiment
??singlecellexperiment
ncells <- 100
u <- matrix(rpois(20000, 5), ncol=ncells)
v <- log2(u + 1)
pca <- matrix(runif(ncells*5), ncells)
tsne <- matrix(rnorm(ncells*2), ncells)
sce <- SingleCellExperiment(assays=list(counts=u, logcounts=v),
reducedDims=SimpleList(PCA=pca, tSNE=tsne))
library(SingleCellExperiment)
ncells <- 100
u <- matrix(rpois(20000, 5), ncol=ncells)
v <- log2(u + 1)
pca <- matrix(runif(ncells*5), ncells)
tsne <- matrix(rnorm(ncells*2), ncells)
sce <- SingleCellExperiment(assays=list(counts=u, logcounts=v),
reducedDims=SimpleList(PCA=pca, tSNE=tsne))
sce
colData(sce)
rownames(colData(sce))
assays(sce)
library(scRNAseq)
sce <- ReprocessedAllenData("tophat_counts")
sce
library(SingleCellExperiment)
counts <- matrix(rpois(100, lambda = 10), ncol=10, nrow=10)
sce <- SingleCellExperiment(assays = list(counts = counts))
sce
se <- SummarizedExperiment(list(counts=counts))
as(se, "SingleCellExperiment")
library(scRNAseq)
sce <- ReprocessedAllenData("tophat_counts")
sce
library(scRNAseq)
??scRNAseq
vignette(package="scRNAseq")
vignette("scRNAseq"package="scRNAseq")
vignette("scRNAseq",package="scRNAseq")
data(package="scRNAseq")
data(allen)
allen
as(allen, "SingleCellExperiment")
allensce <- as(allen, "SingleCellExperiment")
allensce
colData(allensce)
tissue.positions <- read.csv("Downloads/spatial/tissue_positions_list.csv", header=FALSE)
dim(tissue.positions)
dim(colData(allensce))
colData(allensce) <- cbind(colData(allensce), tissue.positions[1:379,])
dim(colData(allensce))
colData(allensce)
library(MASS)
data("Boston")
ls()
=Boston
?Boston
library(MASS)
data(Boston)
boxplot(Boston$medv)
boxplot(log(Boston$medv))
boxplot(log2(Boston$medv))
ls()
rm(list=ls())
library(MASS)
data(Boston)
?Boston
help(Boston)
Boston[1:3,]
dim(Boston)
n <- nrow(Boston)
n
summary(Boston$medv)
hist(Boston$medv, prob=TRUE, xlab='Prezzo mediano delle abitazioni',
main='Istogramma')
boxplot(Boston$medv, xlab='Prezzo mediano delle abitazioni', main='Boxplot' )
plot(Boston$medv, Boston$lstat, main='Diagramma di dispersione med vs lstat',
xlab='% di proprietari con basso stato socioeconomico',
ylab='Prezzo mediano', pch=19, cex=0.5)
cor(Boston$medv, Boston$lstat)
beta1 <- cov(Boston$medv, Boston$lstat)/var(Boston$lstat)
beta1
beta0 <- mean(Boston$medv) - beta1* mean(Boston$lstat)
beta0
mean(Boston$lstat^2)-(mean(Boston$lstat)^2)
var(Boston$lstat)*(n-1)/n
modello <- lm(medv ~ lstat, data=Boston)
## informazioni di base: stime dei coefficienti
modello
summary(modello)
names(modello)
modello$coefficients
valori.stimati <- fitted(modello)
plot(Boston$lstat, Boston$medv, pch=19, cex=0.5,
xlab='% proprietari con basso stato socioeconomico',
ylab='Prezzo mediano')
## aggiungiamo i valori stimati
points(Boston$lstat, valori.stimati, pch='x', col='green')
## aggiungiamo la retta stimata ai minimi quadrati
abline(coef(modello)[1], coef(modello)[2], lty=2, col='red', lwd=3)
## equivale a
## abline(beta0, beta1, lty=2, col='red')
## Residui
residui <- residuals(modello)
# dividiamo la finestra grafica in 4 parti, 2 righe e 2 colonne
par(mfrow=c(2,2))
hist(residui, prob=TRUE)
plot(residui, pch=19, cex=0.5, ylab='Residui')
## aggiungiamo la retta parallela all'asse delle ascisse
abline(h=0, lty=2)
plot(valori.stimati, residui, pch=19, cex=0.5, xlab='Valori stimati',
ylab='Residui')
abline(h=0, lty=2)
plot(Boston$lstat, residui, ylab='Residui',
xlab='% proprietari con basso stato socioeconomico', pch=19, cex=0.5)
abline(h=0, lty=2)
source('~/Downloads/R/lab-lm-moodle.R')
residui
valori.stimati
install.packages("ISLR")
library(MASS)
data(Boston)
?Boston
help(Boston)
Boston[1:3,]
dim(Boston)
n <- nrow(Boston)
n
summary(Boston$medv)
hist(Boston$medv, prob=TRUE, xlab='Prezzo mediano delle abitazioni',
main='Istogramma')
boxplot(Boston$medv, xlab='Prezzo mediano delle abitazioni', main='Boxplot' )
library(MASS)
data(Boston)
?Boston
help(Boston)
Boston[1:3,]
dim(Boston)
n <- nrow(Boston)
n
summary(Boston$medv)
hist(Boston$medv, prob=TRUE, xlab='Prezzo mediano delle abitazioni',
main='Istogramma')
boxplot(Boston$medv, xlab='Prezzo mediano delle abitazioni', main='Boxplot' )
plot(Boston$medv, Boston$lstat, main='Diagramma di dispersione med vs lstat',
xlab='% di proprietari con basso stato socioeconomico',
ylab='Prezzo mediano', pch=19, cex=0.5)
library(MASS)
data(Boston)
?Boston
help(Boston)
Boston[1:3,]
dim(Boston)
n <- nrow(Boston)
n
summary(Boston$medv)
hist(Boston$medv, prob=TRUE, xlab='Prezzo mediano delle abitazioni',
main='Istogramma')
boxplot(Boston$medv, xlab='Prezzo mediano delle abitazioni', main='Boxplot' )
plot(Boston$medv, Boston$lstat, main='Diagramma di dispersione med vs lstat',
xlab='% di proprietari con basso stato socioeconomico',
ylab='Prezzo mediano', pch=19, cex=0.5)
foo()
foo <- function()
{
return(2+2)
}
foo <- function()
{
return(2+2)
}
foo
foo()
foo
MASS
?MASS
??MASS
fbeta
source('~/Downloads/R/lab-lm-moodle.R')
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install(version = "devel")
library(BiocManager)
library(AnnotationHub)
BiocManager::install(AnnotationHub)
BiocManager::install("AnnotationHub")
AnnotationHub::query(ExperimentHub::ExperimentHub(), "seqFISH_Counts")[[1]]
install("ExperimentHub")
AnnotationHub::query(ExperimentHub::ExperimentHub(), "seqFISH_Counts")[[1]]
knitr::opts_chunk$set(echo = TRUE)
library(SpatialExperiment)
library(scater)
source("../scripts/segmentation_functions.R")
source("../scripts/spatial_functions.R")
boundary_polygons = extractPolygonsFromSegmentation(
data,
modes = c("boundaryPolygons"),
cellFilterFactor = 5,
minPixels = 50,
cellPrefix = "cell_",
cellSuffix = "",
plot = TRUE,
verbose = FALSE
)
colnames(boundary_polygons) <- c("x","y","cell","uniqueID")
boundary_polygons <- pruneStraightLines(boundary_polygons, group = "uniqueID")
setwd("~/Desktop/gDrive/works/coding/spatialStuff/reports")
source("../scripts/segmentation_functions.R")
source("../scripts/spatial_functions.R")
data = readRDS("../data/dense_segmentation_example.Rds")
boundary_polygons = extractPolygonsFromSegmentation(
data,
modes = c("boundaryPolygons"),
cellFilterFactor = 5,
minPixels = 50,
cellPrefix = "cell_",
cellSuffix = "",
plot = TRUE,
verbose = FALSE
)
BiocManager::install
colnames(boundary_polygons) <- c("x","y","cell","uniqueID")
boundary_polygons <- pruneStraightLines(boundary_polygons, group = "uniqueID")
dim(boundary_polygons)
head(boundary_polygons)
BiocManager::install("patchwork")
source("../scripts/segmentation_functions.R")
source("../scripts/spatial_functions.R")
data = readRDS("../data/dense_segmentation_example.Rds")
boundary_polygons = extractPolygonsFromSegmentation(
data,
modes = c("boundaryPolygons"),
cellFilterFactor = 5,
minPixels = 50,
cellPrefix = "cell_",
cellSuffix = "",
plot = TRUE,
verbose = FALSE
)
colnames(boundary_polygons) <- c("x","y","cell","uniqueID")
boundary_polygons <- pruneStraightLines(boundary_polygons, group = "uniqueID")
dim(boundary_polygons)
head(boundary_polygons)
length(cellnames)
cellnames = unique(as.character(boundary_polygons$uniqueID))
length(cellnames)
cellnames
genenames = paste0("gene_", 1:10)
exprs = matrix(rpois(length(cellnames)*length(genenames), 50),
length(genenames), length(cellnames),
dimnames = list(genenames, cellnames))
dim(exprs)
exprs[1:5,1:5]
sce = SpatialExperiment(assays = list(counts = exprs))
sce
scater::perCellQCMetrics(sce)
colData(sce) <- scater::perCellQCMetrics(sce)
colnames(exprs)
colnames(sce)
colnames(sce) <- colnames(exprs)
rownames(sce) <- rownames(exprs)
colnames(sce)
rownames(colData(sce))
colData(sce)
sce = SpatialExperiment(assays = list(counts = exprs))
colData(sce)
colData(sce)
colData(sce) <- scater::perCellQCMetrics(sce)
colData(sce)
colData(sce)[, "uniqueID"]
colData(sce)[, "uniqueID"] <- colnames(exprs)
colData(sce)[, "uniqueID"]
boundary_polygons$uniqueID
colnames(sce)
colnames(exprs)
rownames(exprs)
rownames(sce)
spatialCoordinates <- cbind(IRanges::NumericList(
split(
as.numeric(boundary_polygons$x),
factor(boundary_polygons$uniqueID,
levels = rownames(colData(sce)))
)), IRanges::NumericList(
split(
as.numeric(boundary_polygons$y),
factor(boundary_polygons$uniqueID,
levels = rownames(colData(sce)))
)))
spatialCoordinates
IRanges::NumericList(
split(
as.numeric(boundary_polygons$x),
factor(boundary_polygons$uniqueID,
levels = rownames(colData(sce)))
))
spatialCoordinates <- SimpleList(IRanges::NumericList(
split(
as.numeric(boundary_polygons$x),
factor(boundary_polygons$uniqueID,
levels = rownames(colData(sce)))
)), IRanges::NumericList(
split(
as.numeric(boundary_polygons$y),
factor(boundary_polygons$uniqueID,
levels = rownames(colData(sce)))
)))
spatialCoordinates
spatialCoords(sce) <- spatialCoordinates
getSegmentationVerticesDF
spatialCoordinates <- SimpleList(colnames(exprs), IRanges::NumericList(
split(
as.numeric(boundary_polygons$x),
factor(boundary_polygons$uniqueID,
levels = rownames(colData(sce)))
)), IRanges::NumericList(
split(
as.numeric(boundary_polygons$y),
factor(boundary_polygons$uniqueID,
levels = rownames(colData(sce)))
)))
names(spatialCoordinates) <- c("uniqueID",
"segmentation_vertices_x",
"segmentation_vertices_y")
spatialCoords(sce) <- spatialCoordinates
spatialCoordinates
IRanges::NumericList( split(
as.numeric(boundary_polygons$x),
factor(boundary_polygons$uniqueID,
levels = rownames(colData(sce)))))
IRanges::NumericList(
split(
as.numeric(boundary_polygons$y),
factor(boundary_polygons$uniqueID,
levels = rownames(colData(sce)))
)))
split(
as.numeric(boundary_polygons$y),
factor(boundary_polygons$uniqueID,
levels = rownames(colData(sce)))
)))
split(
as.numeric(boundary_polygons$y),
factor(boundary_polygons$uniqueID,
levels = rownames(colData(sce)))
))
split(
as.numeric(boundary_polygons$y),
factor(boundary_polygons$uniqueID,
levels = rownames(colData(sce)))
)
IRanges::NumericList(
split(
as.numeric(boundary_polygons$y),
factor(boundary_polygons$uniqueID,
levels = rownames(colData(sce)))
)))
IRanges::NumericList(
split(
as.numeric(boundary_polygons$y),
factor(boundary_polygons$uniqueID,
levels = rownames(colData(sce)))
))
IRanges::NumericList( split(
as.numeric(boundary_polygons$x),
factor(boundary_polygons$uniqueID,
levels = rownames(colData(sce)))))
colnames(exprs)
names(spatialCoordinates) <- c("uniqueID",
"segmentation_vertices_x",
"segmentation_vertices_y")
spatialCoords(sce) <- spatialCoordinates
spatialCoords(sce) <- NULL
spatialCoords(sce) <- spatialCoordinates
knitr::opts_chunk$set(echo = TRUE)
sce = SingleCellExperiment(assays = list(counts = exprs))
colData(sce) <- scater::perCellQCMetrics(sce)
colData(sce)[, "uniqueID"] <- colnames(exprs)
colnames(sce) <- colnames(exprs)
rownames(sce) <- rownames(exprs)
rownames(colData(sce)) <- colnames(sce)
sce
colData(sce)
dim(colData(sce))
colData(sce)$segmentation_vertices_x = IRanges::NumericList(
split(
as.numeric(boundary_polygons$x),
factor(boundary_polygons$uniqueID,
levels = rownames(colData(sce)))
))
colData(sce)$segmentation_vertices_y = IRanges::NumericList(
split(
as.numeric(boundary_polygons$y),
factor(boundary_polygons$uniqueID,
levels = rownames(colData(sce)))
))
head(colData(sce))
colData(sce)
sce = SpatialExperiment(assays = list(counts = exprs))
sce
colData(sce)
sce
spatial(sce)
spatialCoordinates(sce)
spatialCoords(sce)

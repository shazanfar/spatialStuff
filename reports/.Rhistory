}
neighborr <- r + dr
neighborc <- r + dc
# get the pixel orientation
dx <- lp[[o]][neighborr,neighborc+1,s] - lp[[o]][neighborr,neighborc-1,s]
dy <- lp[[o]][neighborr-1,neighborc,s] - lp[[o]][neighborr+1,neighborc,s]
mag <- sqrt(dx*dx + dy*dy)
orient <- atan2(dy,dx)
# reorient the pixel to the feature orientation
orient <- orient + orientedPeaks[p,]$orientation
#print(paste("Orientation:",orient,orientedPeaks[p,]$orientation))
if(orient >= pi){
orient <- orient - 2*pi
}
# Add to bin...
offsetDragFactor <- exp((-(dr*dr+dc*dc))/(2.0*sigma*sigma))
bin <- round(((orient + pi) / (2*pi)) * BINSPERSUBREGION) + 1 # scale -PI,PI to 0,1
bin <- ifelse(bin > BINSPERSUBREGION, 1, bin) # in case of 360 degrees
#print(paste("Bin:",bin, "subregionr:",subregionr,"subregionc:",subregionc))
#print(paste(mag,orient,bin,offsetDragFactor))
hist[subregionr,subregionc,bin] <- mag * offsetDragFactor
}
}
}
# Reorganize the bin weights into a single array
descriptor <- list()
for(x in c(1:SUBREGIONW)){
for(y in c(1:SUBREGIONW)){
for(z in c(1:BINSPERSUBREGION)){
descriptor[[length(descriptor)+1]] <- hist[x,y,z]
}
}
}
descriptor <- unlist(descriptor)
maxmag <- max(descriptor)
if(maxmag > 0){
descriptor <- descriptor/maxmag # normalize to unit vector
}
SIFTDescriptors[[length(SIFTDescriptors)+1]] <- descriptor
}
return(SIFTDescriptors)
}
siftDataBuilder <- function(siftDescriptors, orientedPeaks){
siftData <- list()
for(p in c(1:nrow(orientedPeaks))){
print(paste("Sift Point"))
if(sum(siftDescriptors[[p]]) > 0){
siftPoint <- list()
siftPoint[[1]] <- orientedPeaks[p,]
siftPoint[[2]] <- siftDescriptors[[p]]
names(siftPoint) <- c("Peak","Descriptor")
siftData[[length(siftData)+1]] <- siftPoint
}
else{
print("Lack of magnitude in descriptor.")
}
}
return(siftData)
}
SIFT <- function(imgFileName, numOctaves = 4, numScaleLevels = 5, sd = 1.6){
## Load the image
myjpg <- readJPEG(imgFileName)
grayImg <- grayImage(myjpg)
## Build the Difference-of-Gaussians pyramid
lp <- laplacianPyramid(grayImg, numOctaves, numScaleLevels, sd)
D <- differenceOfGaussianPyramid(lp, numOctaves, numScaleLevels)
## Scale space peak detection
peaks <- scaleSpacePeakDetection(D, numOctaves, numScaleLevels, sd)
## Accurate keypoint localization
localizedPeaks <- peakLocalization(peaks, D, numOctaves, numScaleLevels, sd, MAXSTEPS = 10)
## Eliminating Edge Responses
stablePeaks <- getStablePeaks(localizedPeaks, D, numOctaves, numScaleLevels)
## Peak Orientation Assignment
orientedPeaks <- assignOrientationAndMagnitude(lp, stablePeaks, sd)
## Generate the SIFT Descriptors (PHEW)
drawPeaks(grayImg,orientedPeaks, drawCircles = FALSE)
siftDescriptors <- generateSIFTDescriptors(lp, orientedPeaks)
## Combine the data into one set
SIFTData <- siftDataBuilder(siftDescriptors,orientedPeaks)
return(SIFTData)
}
#
#
# SIFT.a <- SIFT("imgA.JPG")
# SIFT.b <- SIFT("imgB.JPG")
#
# length(SIFT.a)
# length(SIFT.b)
gg = makeCallGraph("package:DEScan2")
if(require(Rgraphviz)) {
gg = layoutGraph(gg, layoutType = "circo")
graph.par(list(nodes = list(fontsize=55)))
renderGraph(gg) ## could also call plot directly
}
install.packages("Rgraphviz")
source("https://bioconductor.org/biocLite.R")
biocLite("Rgraphviz")
gg = makeCallGraph("package:DEScan2")
if(require(Rgraphviz)) {
gg = layoutGraph(gg, layoutType = "circo")
graph.par(list(nodes = list(fontsize=55)))
renderGraph(gg) ## could also call plot directly
}
gg = makeCallGraph("package:DEScan2")
install.packages("CodeDepends")
gg = makeCallGraph("package:DEScan2")
library("CodeDepends")
gg = makeCallGraph("package:DEScan2")
gg = makeCallGraph("package:CodeDepends")
gg = makeCallGraph("package:DEScan2")
if(require(Rgraphviz)) {
gg = layoutGraph(gg, layoutType = "circo")
graph.par(list(nodes = list(fontsize=55)))
renderGraph(gg) ## could also call plot directly
}
gg = makeCallGraph("package:CodeDepends")
if(require(Rgraphviz)) {
gg = layoutGraph(gg, layoutType = "circo")
graph.par(list(nodes = list(fontsize=55)))
renderGraph(gg) ## could also call plot directly
}
library(DEScan2)
gg = makeCallGraph("package:DEScan2")
if(require(Rgraphviz)) {
gg = layoutGraph(gg, layoutType = "circo")
graph.par(list(nodes = list(fontsize=55)))
renderGraph(gg) ## could also call plot directly
}
?makeCallGraph
obj<-readScript("exonreport_Mar_01.Rmd")
obj<-readScript("/Users/inzirio/Desktop/gDrive/works/WCM/peixoto/reports/exon_no_RS2HC7_Mar_01/exonreport_Mar_01.Rmd")
obj
gg = layoutGraph(obj, layoutType = "circo")
graph.par(list(nodes = list(fontsize=55)))
renderGraph(gg) ## could also call plot directly
gg <- makeCallGraph(obj)
makeVariableGraph( info = obj)
makeVariableGraph(obj)
aa<.makeVariableGraph(obj)
makeVariableGraph( info = getInputs(obj))
obj
makeCallGraph("/Users/inzirio/Desktop/gDrive/works/WCM/peixoto/reports/exon_no_RS2HC7_Mar_01/exonreport_Mar_01.Rmd")
install.packages("BiocManager")
library(BiocManager)
install("systemPipeR")
library(systemPipeR)
vignette(systemPipeR)
vignette("systemPipeR")
library(systemPipeRdata)
genWorkenvir(workflow="rnaseq")
setwd("rnaseq")
install("zimbwave")
BiocManager::install("zimbwave")
BiocManager::install("Rsamtools")
library(fletcher)
library(fletcher2017data)
data(fletcher2017data)
data(fletcher)
View(fletcher)
colData(fletcher)
install(SingleCellExperiment)
install("SingleCellExperiment")
BiocManager::available()install("SingleCellExperiment")
BiocManager::install("SingleCellExperiment")
library(SingleCellExperiment)
colData(fletcher)
colData(fletcher)
library(clusterExperiment)
?makeFilterStats
?filterData
detectCores()
reducedDim()
reducedDim
update.packages()
install.packages("BiocManager")
BiocManager::install("GenomicRanges")
read.table(file="/Users/inzirio/baldini_heatmaps/peaks_at_least_two_unique_255_noblack.bed",
sep="\t", header=FALSE, quote=FALSE)
read.table(file="/Users/inzirio/baldini_heatmaps/peaks_at_least_two_unique_255_noblack.bed",
sep="\t", header=FALSE, quote="")
peaks <- read.table(file="/Users/inzirio/baldini_heatmaps/peaks_at_least_two_unique_255_noblack.bed",
sep="\t", header=FALSE, quote="")
peaks <- GenomicRanges::GRanges(read.table(file="/Users/inzirio/baldini_heatmaps/peaks_at_least_two_unique_255_noblack.bed",
sep="\t", header=FALSE, quote=""))
peaks
peaks <- read.table(file="/Users/inzirio/baldini_heatmaps/peaks_at_least_two_unique_255_noblack.bed",
sep="\t", header=FALSE, quote="")
peaksnames <- paste0(peaks$V1, peaks$V2, peaks$V3, sep="", collapse=TRUE)
peaksnames <- paste0(peaks$V1, peaks$V2, peaks$V3, sep="")
peaksnames
peaksnames <- paste0(peaks$V1, peaks$V2, peaks$V3, sep="_")
peaksnames
peaksnames <- paste0(peaks$V1, peaks$V2, peaks$V3, sep="_", collapse=TRUE)
peaksnames <- paste0(peaks$V1, peaks$V2, peaks$V3, collapse="_")
peaksnames
peaksnames <- paste(peaks$V1, peaks$V2, peaks$V3, sep="_")
peaksnames
rep("*",8)
peaks <- cbind(peaks, peaksnames, rep("*",8))
peaks <- cbind(peaks, peaksnames, "*")
peaks <- read.table(file="/Users/inzirio/baldini_heatmaps/peaks_at_least_two_unique_255_noblack.bed",
sep="\t", header=FALSE, quote="")
peaksnames <- paste(peaks$V1, peaks$V2, peaks$V3, sep="_")
peaks <- cbind(peaks, peaksnames, ".", ".", ".", ".", ".", ".", ".", ".")
peaks
write.table(file="/Users/inzirio/baldini_heatmaps/peaks_at_least_two_unique_255_noblack_12cols.bed",
sep="\t", col.names=FALSE, row.names=FALSE)
write.table(x=peaks, file="/Users/inzirio/baldini_heatmaps/peaks_at_least_two_unique_255_noblack_12cols.bed",
sep="\t", col.names=FALSE, row.names=FALSE)
write.table(x=peaks, file="/Users/inzirio/baldini_heatmaps/peaks_at_least_two_unique_255_noblack_12cols.bed",
sep="\t", col.names=FALSE, row.names=FALSE, quote=FALSE)
BiocManager::install("waldronlab/MultiAssayWorkshop", dependencies=TRUE, build_vignettes=TRUE)
library()
library(MultiAssayWorkshop)
vignette(MultiAssayWorkshop)
vignette("MultiAssayWorkshop")
?MultiAssayWorkshop
vignette(package="MultiAssayWorkshop")
vignette(Ramos_MultiAssayExperiment,package="MultiAssayWorkshop")
vignette("Ramos_MultiAssayExperiment",package="MultiAssayWorkshop")
MultiAssayExperiment
MultiAssayExperiment::MultiAssayExperiment
data("miniACC")
MultiAssayExperiment(experiments=experiments(miniACC),
colData=colData(miniACC),
sampleMap=sampleMap(miniACC),
metadata=metadata(miniACC))
BiocManager::install("miniACC")
data(miniACC)
data("miniACC")
library(MultiAssayExperiment)
data("miniACC")
MultiAssayExperiment(experiments=experiments(miniACC),
colData=colData(miniACC),
sampleMap=sampleMap(miniACC),
metadata=metadata(miniACC))
?prepMultiAssay
aacmae<-MultiAssayExperiment(experiments=experiments(miniACC),
colData=colData(miniACC),
sampleMap=sampleMap(miniACC),
metadata=metadata(miniACC))
experiments(aacmae)
sampleMap(aacmae)
library(ExperimentHub)
eh <- ExperimentHub()
display(eh)
display(eh)
head(eh)
display(eh)
query(eh, "gtex")
eh["EH556"]
gt <- eh["EH556"]
library(MultiAssayExperiment)
GEOquery::getGEO("GSE71585")
aa <- GEOquery::getGEO("GSE71585")
BiocManager::install("yarn")
library(yarn)
ggt <- downloadGTEx(type="genes", "gtex")
ggt <- downloadGTEx(type="genes", "~/gtex")
ggt <- downloadGTEx(type="genes", "./gtex.rds")
downloadGTEx()
downloadGTEx
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dada2)
library(vegan)
miseq_path <- "~/MiSeq_SOP" #CHANGE DIRECTORY DEPENDING ON THE NEEDS
if(!file_test("-d", miseq_path)) {
dir.create(miseq_path)
}
download.file("http://www.mothur.org/w/images/d/d6/MiSeqSOPData.zip", destfile = paste(miseq_path,"MiSeqSOPData.zip", sep ="/"))
unzip(paste(miseq_path, "MiSeqSOPData.zip", sep ="/"), exdir = miseq_path)
invisible(file.remove(file.path(miseq_path, "MiSeqSOPData.zip")))
unlink(x = paste(miseq_path,"__MACOSX", sep ="/"), recursive = T)
miseq_path2=paste(miseq_path,"MiSeq_SOP", sep ="/")
fnFs <- sort(list.files(miseq_path2, pattern="_R1_001.fastq"))
fnRs <- sort(list.files(miseq_path2, pattern="_R2_001.fastq"))
fnFs
sampleNames <- sapply(strsplit(fnFs, "_"), `[`, 1)
fnFs <- file.path(miseq_path2, fnFs)
fnRs <- file.path(miseq_path2, fnRs)
plotQualityProfile(fnFs[1:2])
plotQualityProfile(fnRs[1:2])
barcodes <- read.csv("Downloads/raw_feature_bc_matrix/barcodes.tsv", sep="\t")
barcodes
^^spatial
??spatial
vignette("spatial")
vignette(package="spatial")
barcodes <- read.csv("Downloads/spatial/tissue_positions_list.csv")
barcodes
spatial.tsv <- read.csv("Downloads/spatial/tissue_positions_list.csv")
barcodes <- read.csv("Downloads/raw_feature_bc_matrix/barcodes.tsv", sep="\t")
barcodes
barcodes[,1]
tissue.positions <- read.csv("Downloads/spatial/tissue_positions_list.csv")
barcodes <- read.csv("Downloads/raw_feature_bc_matrix/barcodes.tsv", sep="\t")
sum(barcodes[,1] %in% tissue.positions[,1])
dim(barcodes)
barcodes <- read.csv("Downloads/raw_feature_bc_matrix/barcodes.tsv", sep="\t", header=FALSE)
tissue.positions <- read.csv("Downloads/spatial/tissue_positions_list.csv", header=FALSE)
barcodes <- read.csv("Downloads/raw_feature_bc_matrix/barcodes.tsv", sep="\t", header=FALSE)
sum(barcodes[,1] %in% tissue.positions[,1])
dim(barcodes)
dim(tissue.positions)
tissue.positions[,c(2,3)]
tissue.positions[,c(3,4)]
duplicated(tissue.positions[,c(3,4)])
sum(duplicated(tissue.positions[,c(3,4)]))
sce <- SingleCellExperiment::SingleCellExperiment()
sce
?DFrame
??DFrame
?UseMethod
?summarizedExperiments
?summarizedExperiment
?SummarizedExperiment
?disableValidity
??disableValidity
??S4Vectors:::disableValidity
S4Vectors:::disableValidity
??DFrame
?singlecellexperiment
??singlecellexperiment
ncells <- 100
u <- matrix(rpois(20000, 5), ncol=ncells)
v <- log2(u + 1)
pca <- matrix(runif(ncells*5), ncells)
tsne <- matrix(rnorm(ncells*2), ncells)
sce <- SingleCellExperiment(assays=list(counts=u, logcounts=v),
reducedDims=SimpleList(PCA=pca, tSNE=tsne))
library(SingleCellExperiment)
ncells <- 100
u <- matrix(rpois(20000, 5), ncol=ncells)
v <- log2(u + 1)
pca <- matrix(runif(ncells*5), ncells)
tsne <- matrix(rnorm(ncells*2), ncells)
sce <- SingleCellExperiment(assays=list(counts=u, logcounts=v),
reducedDims=SimpleList(PCA=pca, tSNE=tsne))
sce
colData(sce)
rownames(colData(sce))
assays(sce)
library(scRNAseq)
sce <- ReprocessedAllenData("tophat_counts")
sce
library(SingleCellExperiment)
counts <- matrix(rpois(100, lambda = 10), ncol=10, nrow=10)
sce <- SingleCellExperiment(assays = list(counts = counts))
sce
se <- SummarizedExperiment(list(counts=counts))
as(se, "SingleCellExperiment")
library(scRNAseq)
sce <- ReprocessedAllenData("tophat_counts")
sce
library(scRNAseq)
??scRNAseq
vignette(package="scRNAseq")
vignette("scRNAseq"package="scRNAseq")
vignette("scRNAseq",package="scRNAseq")
data(package="scRNAseq")
data(allen)
allen
as(allen, "SingleCellExperiment")
allensce <- as(allen, "SingleCellExperiment")
allensce
colData(allensce)
tissue.positions <- read.csv("Downloads/spatial/tissue_positions_list.csv", header=FALSE)
dim(tissue.positions)
dim(colData(allensce))
colData(allensce) <- cbind(colData(allensce), tissue.positions[1:379,])
dim(colData(allensce))
colData(allensce)
library(MASS)
data("Boston")
ls()
=Boston
?Boston
library(MASS)
data(Boston)
boxplot(Boston$medv)
boxplot(log(Boston$medv))
boxplot(log2(Boston$medv))
ls()
rm(list=ls())
library(MASS)
data(Boston)
?Boston
help(Boston)
Boston[1:3,]
dim(Boston)
n <- nrow(Boston)
n
summary(Boston$medv)
hist(Boston$medv, prob=TRUE, xlab='Prezzo mediano delle abitazioni',
main='Istogramma')
boxplot(Boston$medv, xlab='Prezzo mediano delle abitazioni', main='Boxplot' )
plot(Boston$medv, Boston$lstat, main='Diagramma di dispersione med vs lstat',
xlab='% di proprietari con basso stato socioeconomico',
ylab='Prezzo mediano', pch=19, cex=0.5)
cor(Boston$medv, Boston$lstat)
beta1 <- cov(Boston$medv, Boston$lstat)/var(Boston$lstat)
beta1
beta0 <- mean(Boston$medv) - beta1* mean(Boston$lstat)
beta0
mean(Boston$lstat^2)-(mean(Boston$lstat)^2)
var(Boston$lstat)*(n-1)/n
modello <- lm(medv ~ lstat, data=Boston)
## informazioni di base: stime dei coefficienti
modello
summary(modello)
names(modello)
modello$coefficients
valori.stimati <- fitted(modello)
plot(Boston$lstat, Boston$medv, pch=19, cex=0.5,
xlab='% proprietari con basso stato socioeconomico',
ylab='Prezzo mediano')
## aggiungiamo i valori stimati
points(Boston$lstat, valori.stimati, pch='x', col='green')
## aggiungiamo la retta stimata ai minimi quadrati
abline(coef(modello)[1], coef(modello)[2], lty=2, col='red', lwd=3)
## equivale a
## abline(beta0, beta1, lty=2, col='red')
## Residui
residui <- residuals(modello)
# dividiamo la finestra grafica in 4 parti, 2 righe e 2 colonne
par(mfrow=c(2,2))
hist(residui, prob=TRUE)
plot(residui, pch=19, cex=0.5, ylab='Residui')
## aggiungiamo la retta parallela all'asse delle ascisse
abline(h=0, lty=2)
plot(valori.stimati, residui, pch=19, cex=0.5, xlab='Valori stimati',
ylab='Residui')
abline(h=0, lty=2)
plot(Boston$lstat, residui, ylab='Residui',
xlab='% proprietari con basso stato socioeconomico', pch=19, cex=0.5)
abline(h=0, lty=2)
source('~/Downloads/R/lab-lm-moodle.R')
residui
valori.stimati
install.packages("ISLR")
library(MASS)
data(Boston)
?Boston
help(Boston)
Boston[1:3,]
dim(Boston)
n <- nrow(Boston)
n
summary(Boston$medv)
hist(Boston$medv, prob=TRUE, xlab='Prezzo mediano delle abitazioni',
main='Istogramma')
boxplot(Boston$medv, xlab='Prezzo mediano delle abitazioni', main='Boxplot' )
library(MASS)
data(Boston)
?Boston
help(Boston)
Boston[1:3,]
dim(Boston)
n <- nrow(Boston)
n
summary(Boston$medv)
hist(Boston$medv, prob=TRUE, xlab='Prezzo mediano delle abitazioni',
main='Istogramma')
boxplot(Boston$medv, xlab='Prezzo mediano delle abitazioni', main='Boxplot' )
plot(Boston$medv, Boston$lstat, main='Diagramma di dispersione med vs lstat',
xlab='% di proprietari con basso stato socioeconomico',
ylab='Prezzo mediano', pch=19, cex=0.5)
library(MASS)
data(Boston)
?Boston
help(Boston)
Boston[1:3,]
dim(Boston)
n <- nrow(Boston)
n
summary(Boston$medv)
hist(Boston$medv, prob=TRUE, xlab='Prezzo mediano delle abitazioni',
main='Istogramma')
boxplot(Boston$medv, xlab='Prezzo mediano delle abitazioni', main='Boxplot' )
plot(Boston$medv, Boston$lstat, main='Diagramma di dispersione med vs lstat',
xlab='% di proprietari con basso stato socioeconomico',
ylab='Prezzo mediano', pch=19, cex=0.5)
foo()
foo <- function()
{
return(2+2)
}
foo <- function()
{
return(2+2)
}
foo
foo()
foo
MASS
?MASS
??MASS
fbeta
source('~/Downloads/R/lab-lm-moodle.R')
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install(version = "devel")
library(BiocManager)
library(AnnotationHub)
BiocManager::install(AnnotationHub)
BiocManager::install("AnnotationHub")
AnnotationHub::query(ExperimentHub::ExperimentHub(), "seqFISH_Counts")[[1]]
install("ExperimentHub")
AnnotationHub::query(ExperimentHub::ExperimentHub(), "seqFISH_Counts")[[1]]
getwd()
setwd("~/Desktop/gDrive/works/coding/spatialStuff/reports")
